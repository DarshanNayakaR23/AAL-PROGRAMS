PRIMS ALGORITHM:
import sys

def prims_algorithm(graph):
    n = len(graph)

    selected = [False] * n
    selected[0] = True  # Start from vertex 0
    num_edges = 0

    print("Edge : Weight")

    while num_edges < n - 1:
        minimum = sys.maxsize
        x = y = 0

        for i in range(n):
            if selected[i]:
                for j in range(n):
                    if not selected[j] and graph[i][j]:
                        if minimum > graph[i][j]:
                            minimum = graph[i][j]
                            x = i
                            y = j

        print(f"{x} - {y} : {graph[x][y]}")
        selected[y] = True
        num_edges += 1
graph = [
    [0, 2, 0, 6, 0],
    [2, 0, 3, 8, 5],
    [0, 3, 0, 0, 7],
    [6, 8, 0, 0, 9],
    [0, 5, 7, 9, 0]
]

prims_algorithm(graph)

OUTPUT:
Edge : Weight
0 - 1 : 2
1 - 2 : 3
1 - 4 : 5
0 - 3 : 6

KRUSKALS ALGORITHM:
def find(parent, i):
    if parent[i] == i:
        return i
    return find(parent, parent[i])

def union(parent, rank, x, y):
    xroot = find(parent, x)
    yroot = find(parent, y)

    if rank[xroot] < rank[yroot]:
        parent[xroot] = yroot
    elif rank[xroot] > rank[yroot]:
        parent[yroot] = xroot
    else:
        parent[yroot] = xroot
        rank[xroot] += 1

def kruskal(graph, V):
    result = []  # Store the MST result
    graph.sort()
    parent = [i for i in range(V)]
    rank = [0] * V
    e = 0 
    i = 0 
    while e < V - 1:
        weight, u, v = graph[i]
        i += 1
        x = find(parent, u)
        y = find(parent, v)
        if x != y:
            result.append((u, v, weight))
            union(parent, rank, x, y)
            e += 1
    print("Edge : Weight")
    for u, v, weight in result:
        print(f"{u} - {v} : {weight}")
# Example graph with 4 vertices and 5 edges
V = 4
graph = [
    (10, 0, 1),
    (6, 0, 2),
    (5, 0, 3),
    (15, 1, 3),
    (4, 2, 3)
]

kruskal(graph, V)

OUTPUT:
Edge : Weight
2 - 3 : 4
0 - 3 : 5
0 - 1 : 10
