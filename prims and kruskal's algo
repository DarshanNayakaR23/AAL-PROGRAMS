PRIMS ALGORITHM:
#include <stdio.h>
#include <limits.h>

#define V 5

int minKey(int key[], int mstSet[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (mstSet[v] == 0 && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

void primMST(int graph[V][V]) {
    int parent[V], key[V], mstSet[V];
    
    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
        mstSet[u] = 1;

        for (int v = 0; v < V; v++) {
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++) {
        printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
    }
}

int main() {
    int graph[V][V] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };

    primMST(graph);
    return 0;
}



OUTPUT:
Edge    Weight
0 - 1   2
1 - 2   3
0 - 3   6
1 - 4   5


KRUSKALS ALGORITHM:
#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int u, v, weight;
} Edge;

Edge edges[MAX];
int parent[MAX], rank[MAX];

int find(int i) {
    if (parent[i] == i)
        return i;
    return find(parent[i]);
}

void unionSet(int x, int y) {
    int rootX = find(x);
    int rootY = find(y);
    
    if (rank[rootX] > rank[rootY])
        parent[rootY] = rootX;
    else if (rank[rootX] < rank[rootY])
        parent[rootX] = rootY;
    else {
        parent[rootY] = rootX;
        rank[rootX]++;
    }
}

int compare(const void *a, const void *b) {
    return ((Edge*)a)->weight - ((Edge*)b)->weight;
}

void kruskalMST(int n, int m) {
    int mstWeight = 0;
    
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }

    qsort(edges, m, sizeof(Edge), compare);
    
    printf("Edge \tWeight\n");
    
    for (int i = 0; i < m; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        
        if (find(u) != find(v)) {
            printf("%d - %d \t%d\n", u, v, edges[i].weight);
            mstWeight += edges[i].weight;
            unionSet(u, v);
        }
    }
    printf("Minimum spanning tree weight: %d\n", mstWeight);
}

int main() {
    int n = 4, m = 5;
    
    edges[0].u = 0; edges[0].v = 1; edges[0].weight = 10;
    edges[1].u = 0; edges[1].v = 2; edges[1].weight = 6;
    edges[2].u = 0; edges[2].v = 3; edges[2].weight = 5;
    edges[3].u = 1; edges[3].v = 3; edges[3].weight = 15;
    edges[4].u = 2; edges[4].v = 3; edges[4].weight = 4;
    
    kruskalMST(n, m);
    return 0;
}


OUTPUT:
Edge    Weight
2 - 3   4
0 - 3   5
0 - 1   10
Minimum spanning tree weight: 19

