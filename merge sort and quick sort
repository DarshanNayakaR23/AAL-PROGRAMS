MERGE SORT
#include <stdio.h>

void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    
    int leftArr[n1], rightArr[n2];
    
    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    
    for (int i = 0; i < n2; i++)
        rightArr[i] = arr[mid + 1 + i];
    
    int i = 0, j = 0, k = left;
    
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j])
            arr[k++] = leftArr[i++];
        else
            arr[k++] = rightArr[j++];
    }
    
    while (i < n1)
        arr[k++] = leftArr[i++];
    
    while (j < n2)
        arr[k++] = rightArr[j++];
}

void mergeSort(int arr[], int left, int r



OUTPUT:
Original array [38, 27, 43, 3, 9, 82, 10]
Sorted array: [3, 9, 10, 27, 38, 43, 82]

QUICK SORT:
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [x for x in arr[1:] if x <= pivot]  
        greater = [x for x in arr[1:] if x > pivot]  
        return quick_sort(less) + [pivot] + quick_sort(greater)


arr2 = [10, 7, 8, 9, 1, 5]
print("Original array):", arr2)
sorted_arr2 = quick_sort(arr2)
print("Sorted array:", sorted_arr2)

OUTPUT:
Original array : [10, 7, 8, 9, 1, 5]
Sorted array: [1, 5, 7, 8, 9, 10]
